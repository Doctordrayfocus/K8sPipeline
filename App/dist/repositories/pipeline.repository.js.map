{"version":3,"sources":["../../src/repositories/pipeline.repository.ts"],"sourcesContent":["import { CreatePipelineDto } from './../dtos/pipeline.dto';\nimport { AuthStrategyEntity } from '@/entities/authStrategy.entity';\nimport { PipelineEntity } from '@/entities/pipeline.entity';\nimport { PipelineSettingEntity } from '@/entities/pipelineSetting.entity';\nimport VariableExtractor from '@/helpers/VariableExtractor';\nimport { Pipeline, PipelineSetting } from '@/interfaces/pipeline.interface';\nimport { APIClient, Bitbucket } from 'bitbucket';\nimport path from 'path';\nimport { EntityRepository } from 'typeorm';\nimport shell from 'shelljs';\nimport AuthStrategyRepository from './authStrategy.repository';\n\n@EntityRepository(PipelineEntity)\nexport default class PipelineRepository {\n  private bitbucketClient: APIClient;\n\n  private configureBitbucket = () => {\n    return AuthStrategyEntity.findOne({\n      where: {\n        type: 'bitbucket',\n      },\n    }).then(async strategy => {\n      if (strategy) {\n        const AuthStrategy = new AuthStrategyRepository();\n        const newAccessToken: string = await AuthStrategy.requestNewAccessToken('bitbucket', strategy.refresh_token);\n        const clientOptions = {\n          auth: {\n            token: newAccessToken ? newAccessToken : strategy.access_token,\n          },\n        };\n        this.bitbucketClient = new Bitbucket(clientOptions);\n      }\n    });\n  };\n\n  public getWorkspaces = () => {\n    return this.configureBitbucket().then(() => {\n      return this.bitbucketClient.workspaces.getWorkspaces({\n        pagelen: 30,\n      });\n    });\n  };\n\n  public getRespository = (workspaceId: string) => {\n    return this.configureBitbucket().then(() => {\n      return this.bitbucketClient.repositories.list({\n        workspace: workspaceId,\n        pagelen: 100,\n      });\n    });\n  };\n\n  public getRepositoryBranches = (workspaceId: string, repoId: string) => {\n    return this.configureBitbucket().then(() => {\n      return this.bitbucketClient.repositories.listBranches({\n        workspace: workspaceId,\n        pagelen: 100,\n        repo_slug: repoId,\n      });\n    });\n  };\n\n  public setRepositoryWebhook = (workspaceId: string, repo_slug: string) => {\n    this.configureBitbucket().then(() => {\n      return this.bitbucketClient.webhooks.create({\n        repo_slug: repo_slug,\n        workspace: workspaceId,\n        _body: {\n          name: 'K8sPipelineHook',\n          url: 'http://localhost:3000/bitbucket-webhook',\n          active: true,\n          events: ['repo:push'],\n        },\n      });\n    });\n  };\n\n  public createPipeline = (pipelineData: Pipeline) => {\n    return PipelineEntity.create({ ...pipelineData })\n      .save()\n      .then(pipeline => {\n        return pipeline;\n      });\n  };\n\n  public createPipelineSetting = async (pipelineSetting: PipelineSetting, pipeline: PipelineEntity) => {\n    const settings = await PipelineSettingEntity.create({ ...pipelineSetting }).save();\n    settings.pipeline = pipeline;\n    return settings;\n  };\n\n  public getTemplateVariables = async (lang: string) => {\n    const variableExtractor = new VariableExtractor();\n\n    const templateInfo: {\n      templateVariables: any;\n      folders: string[];\n    } = await variableExtractor.extractTemplateVariables(lang);\n\n    return templateInfo;\n  };\n\n  public setupServiceTemplate = (repoSlug: string, lang: string, branches: string[]) => {\n    const buildTemplateFolder = path.join(__dirname, `../services-build-templates`);\n\n    let pipelineTemplateRepo = '';\n\n    if (lang == 'php') {\n      pipelineTemplateRepo = 'github.com/Doctordrayfocus/K8PipelinePHP';\n    } else if (lang == 'nodejs') {\n      pipelineTemplateRepo = 'github.com/Doctordrayfocus/K8PipelineNodeJs';\n    }\n\n    const childProcess = shell\n      .cd(buildTemplateFolder)\n      .exec(\n        `docker run -t -v $(pwd):/workspace -v /var/run/docker.sock:/var/run/docker.sock -e NO_BUILDKIT=1 earthly/earthly:v0.6.30 ${pipelineTemplateRepo}+install --service=${repoSlug} --envs=${branches.toString()}`,\n        {\n          async: true,\n        },\n      );\n\n    childProcess.stdout.on('data', function (data) {\n      global.SocketServer.emit(`${repoSlug}`, data);\n    });\n  };\n\n  public createServicePipeline = async (createPipelineData: CreatePipelineDto) => {\n    const pipelineData = await PipelineEntity.find({\n      where: [\n        {\n          repo_id: createPipelineData.repoId,\n        },\n      ],\n    });\n\n    let pipeline: PipelineEntity;\n\n    if (pipelineData.length == 0) {\n      // create pipeline\n      pipeline = await this.createPipeline({\n        description: createPipelineData.repoDescription,\n        repo_id: createPipelineData.repoId,\n        repo_url: 'empty',\n        status: 'inactive',\n        lang: createPipelineData.lang,\n        full_name: createPipelineData.repo_name,\n      });\n      // setup a webhook for the repo\n      await this.setRepositoryWebhook(createPipelineData.workspaceId, createPipelineData.repoId);\n    } else {\n      pipeline = pipelineData[0];\n    }\n\n    // get repository branches\n    const paginatedBranches = await this.getRepositoryBranches(createPipelineData.workspaceId, createPipelineData.repoId);\n    const branches = paginatedBranches.data.values;\n    const branchArray = [];\n\n    // create pipeline settings for each branches\n    const templateConfigData = await this.getTemplateVariables(createPipelineData.lang);\n    branches.forEach(branch => {\n      branchArray.push(branch.name);\n      if (pipelineData.length == 0) {\n        this.createPipelineSetting(\n          {\n            branch: branch.name,\n            pipeline_id: pipeline.id,\n            config_to_use: JSON.stringify([]),\n            service_config: JSON.stringify(templateConfigData.templateVariables),\n            pipelineUuid: pipeline.uuid,\n            pipelineId: pipeline.id,\n          },\n          pipeline,\n        ).then(() => {\n          //\n        });\n      }\n    });\n\n    // generate pipeline build template\n    this.setupServiceTemplate(createPipelineData.repoId, createPipelineData.lang, branchArray);\n\n    return pipeline;\n  };\n\n  public getPipelines = async () => {\n    const pipelineData = await PipelineEntity.getRepository()\n      .createQueryBuilder('pipeline')\n      .leftJoinAndSelect('pipeline.settings', 'settings')\n      .getMany();\n    return pipelineData;\n  };\n\n  public getPipeline = async (pipelineUuid: string) => {\n    const pipelineData = await PipelineEntity.getRepository().findOne({\n      where: {\n        uuid: pipelineUuid,\n      },\n      relations: ['settings'],\n    });\n\n    const templateConfig = await this.getTemplateVariables(pipelineData.lang);\n\n    console.log(templateConfig.folders);\n\n    pipelineData.lang_config_folders = JSON.stringify(templateConfig.folders);\n\n    return pipelineData;\n  };\n\n  public updatePipelineSetting = async (settingUuid: string, configToUse: string, serviceConfig: string) => {\n    await PipelineSettingEntity.getRepository()\n      .createQueryBuilder()\n      .update()\n      .set({\n        config_to_use: configToUse,\n        service_config: serviceConfig,\n      })\n      .where('uuid = :uuid', {\n        uuid: settingUuid,\n      })\n      .execute();\n\n    return true;\n  };\n}\n"],"names":["PipelineRepository","configureBitbucket","AuthStrategyEntity","findOne","where","type","then","strategy","AuthStrategy","AuthStrategyRepository","newAccessToken","requestNewAccessToken","refresh_token","clientOptions","auth","token","access_token","bitbucketClient","Bitbucket","getWorkspaces","workspaces","pagelen","getRespository","workspaceId","repositories","list","workspace","getRepositoryBranches","repoId","listBranches","repo_slug","setRepositoryWebhook","webhooks","create","_body","name","url","active","events","createPipeline","pipelineData","PipelineEntity","save","pipeline","createPipelineSetting","pipelineSetting","settings","PipelineSettingEntity","getTemplateVariables","lang","variableExtractor","VariableExtractor","templateInfo","extractTemplateVariables","setupServiceTemplate","repoSlug","branches","buildTemplateFolder","path","join","__dirname","pipelineTemplateRepo","childProcess","shell","cd","exec","toString","async","stdout","on","data","global","SocketServer","emit","createServicePipeline","createPipelineData","find","repo_id","length","description","repoDescription","repo_url","status","full_name","repo_name","paginatedBranches","values","branchArray","templateConfigData","forEach","branch","push","pipeline_id","id","config_to_use","JSON","stringify","service_config","templateVariables","pipelineUuid","uuid","pipelineId","getPipelines","getRepository","createQueryBuilder","leftJoinAndSelect","getMany","getPipeline","relations","templateConfig","console","log","folders","lang_config_folders","updatePipelineSetting","settingUuid","configToUse","serviceConfig","update","set","execute","EntityRepository"],"mappings":"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"}