{"version":3,"sources":["../../src/repositories/authStrategy.repository.ts"],"sourcesContent":["import { AuthStrategyEntity } from '@/entities/authStrategy.entity';\nimport { EntityRepository } from 'typeorm';\nimport passport from 'passport';\nimport { GitLabStrategy as GitHubStrategy } from 'passport-github2';\nimport { BITBUCKET_CLIENT_ID, BITBUCKET_CLIENT_SECRET, GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, GITLAB_APP_ID, GITLAB_APP_SECRET } from '@/config';\nimport { AuthStrategy } from '@/interfaces/authStrategy.inteface';\nimport { Strategy as GitLabStrategy } from 'passport-gitlab2';\nimport { Strategy as BitbucketStrategy } from 'passport-bitbucket-oauth2';\nimport refresh from 'passport-oauth2-refresh';\n\n@EntityRepository(AuthStrategyEntity)\nexport default class AuthStrategyRepository {\n  private saveAuthStrategy(accessToken, refreshToken, profileId, type) {\n    const strategyData: AuthStrategy = {\n      access_token: accessToken,\n      profileId: profileId,\n      refresh_token: refreshToken,\n      type,\n    };\n\n    AuthStrategyEntity.find({\n      where: [\n        {\n          profileId: profileId,\n        },\n      ],\n    }).then(strategy => {\n      if (strategy.length > 0) {\n        strategy[0].access_token = strategyData.access_token;\n        strategy[0].refresh_token = strategyData.refresh_token;\n        strategy[0].type = strategyData.type;\n        strategy[0].save();\n      } else {\n        AuthStrategyEntity.create({ ...strategyData })\n          .save()\n          .then(() => {\n            console.log(`${type} strategy saved`);\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      }\n    });\n  }\n\n  private configureGithub() {\n    passport.use(\n      new GitHubStrategy(\n        {\n          clientID: GITHUB_CLIENT_ID,\n          clientSecret: GITHUB_CLIENT_SECRET,\n          callbackURL: 'http://127.0.0.1:3000/auth/github/callback',\n        },\n        (accessToken, refreshToken, profile) => {\n          this.saveAuthStrategy(accessToken, refreshToken, profile.id, 'github');\n        },\n      ),\n    );\n  }\n\n  private configureGitlab() {\n    passport.use(\n      new GitLabStrategy(\n        {\n          clientID: GITLAB_APP_ID,\n          clientSecret: GITLAB_APP_SECRET,\n          callbackURL: 'http://localhost:3000/auth/gitlab/callback',\n        },\n        (accessToken, refreshToken, profile) => {\n          this.saveAuthStrategy(accessToken, refreshToken, profile.id, 'gitlab');\n        },\n      ),\n    );\n  }\n\n  private configureBitbucket() {\n    const strategy = new BitbucketStrategy(\n      {\n        clientID: BITBUCKET_CLIENT_ID,\n        clientSecret: BITBUCKET_CLIENT_SECRET,\n        callbackURL: 'http://localhost:3000/auth/bitbucket/callback',\n      },\n      (accessToken, refreshToken, profile) => {\n        this.saveAuthStrategy(accessToken, refreshToken, profile.username, 'bitbucket');\n      },\n    );\n    passport.use(strategy);\n    refresh.use(strategy);\n  }\n\n  public requestNewAccessToken = (strategy: string, refreshToken: string): Promise<string> => {\n    return new Promise(resolve => {\n      refresh.requestNewAccessToken(strategy, refreshToken, (err, accessToken) => {\n        resolve(accessToken);\n      });\n    });\n  };\n\n  public authenticateStategy(type: 'github' | 'gitlab' | 'bitbucket') {\n    if (type == 'github') {\n      this.configureGithub();\n      return passport.authenticate('github', { scope: ['repo'] });\n    }\n\n    if (type == 'gitlab') {\n      this.configureGitlab();\n      return passport.authenticate('gitlab', { scope: ['api'] });\n    }\n\n    if (type == 'bitbucket') {\n      this.configureBitbucket();\n      return passport.authenticate('bitbucket', { scope: ['repository:admin', 'webhook'] });\n    }\n  }\n\n  public handleGithubCallback(type: 'github' | 'gitlab' | 'bitbucket') {\n    if (type == 'github') {\n      this.configureGithub();\n      return passport.authenticate('github', { failureRedirect: '/' });\n    }\n    if (type == 'gitlab') {\n      this.configureGitlab();\n      return passport.authenticate('gitlab', { failureRedirect: '/' });\n    }\n\n    if (type == 'bitbucket') {\n      this.configureBitbucket();\n      return passport.authenticate('bitbucket', { failureRedirect: '/' });\n    }\n  }\n}\n"],"names":["AuthStrategyRepository","saveAuthStrategy","accessToken","refreshToken","profileId","type","strategyData","access_token","refresh_token","AuthStrategyEntity","find","where","then","strategy","length","save","create","console","log","catch","error","configureGithub","passport","use","GitHubStrategy","clientID","GITHUB_CLIENT_ID","clientSecret","GITHUB_CLIENT_SECRET","callbackURL","profile","id","configureGitlab","GitLabStrategy","GITLAB_APP_ID","GITLAB_APP_SECRET","configureBitbucket","BitbucketStrategy","BITBUCKET_CLIENT_ID","BITBUCKET_CLIENT_SECRET","username","refresh","authenticateStategy","authenticate","scope","handleGithubCallback","failureRedirect","requestNewAccessToken","Promise","resolve","err","EntityRepository"],"mappings":"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"}