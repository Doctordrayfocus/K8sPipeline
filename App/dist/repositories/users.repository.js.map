{"version":3,"sources":["../../src/repositories/users.repository.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { EntityRepository } from 'typeorm';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { UserEntity } from '@entities/users.entity';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport { isEmpty } from '@utils/util';\n\n@EntityRepository()\nexport default class UserRepository {\n  public async userFindAll(): Promise<User[]> {\n    const users: User[] = await UserEntity.find();\n\n    return users;\n  }\n\n  public async userFindById(userId: number): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, 'UserId is empty');\n\n    const user: User = await UserEntity.findOne({ where: { id: userId } });\n    if (!user) throw new HttpException(409, \"User doesn't exist\");\n\n    return user;\n  }\n\n  public async userCreate(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await UserEntity.findOne({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await UserEntity.create({ ...userData, password: hashedPassword }).save();\n\n    return createUserData;\n  }\n\n  public async userUpdate(userId: number, userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await UserEntity.findOne({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    await UserEntity.update(userId, { ...userData, password: hashedPassword });\n\n    const updateUser: User = await UserEntity.findOne({ where: { id: userId } });\n    return updateUser;\n  }\n\n  public async userDelete(userId: number): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, \"User doesn't existId\");\n\n    const findUser: User = await UserEntity.findOne({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    await UserEntity.delete({ id: userId });\n    return findUser;\n  }\n}\n"],"names":["UserRepository","userFindAll","users","UserEntity","find","userFindById","userId","isEmpty","HttpException","user","findOne","where","id","userCreate","userData","findUser","email","hashedPassword","hash","password","createUserData","create","save","userUpdate","update","updateUser","userDelete","delete","EntityRepository"],"mappings":";;;;;;aASqBA;;wBATA;yBACY;6BAEN;+BACG;sBAEN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGHA,iBAAN;IACb,MAAaC,cAA+B;QAC1C,MAAMC,QAAgB,MAAMC,uBAAU,CAACC,IAAI;QAE3C,OAAOF;IACT;IAEA,MAAaG,aAAaC,MAAc,EAAiB;QACvD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,OAAa,MAAMN,uBAAU,CAACO,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIN;YAAO;QAAE;QACpE,IAAI,CAACG,MAAM,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAE9D,OAAOC;IACT;IAEA,MAAaI,WAAWC,QAAuB,EAAiB;QAC9D,IAAIP,IAAAA,aAAO,EAACO,WAAW,MAAM,IAAIN,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMO,WAAiB,MAAMZ,uBAAU,CAACO,OAAO,CAAC;YAAEC,OAAO;gBAAEK,OAAOF,SAASE,KAAK;YAAC;QAAE;QACnF,IAAID,UAAU,MAAM,IAAIP,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEM,SAASE,KAAK,CAAC,eAAe,CAAC,EAAE;QAE1F,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACJ,SAASK,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAMjB,uBAAU,CAACkB,MAAM,CAAC,qCAAKP;YAAUK,UAAUF;YAAkBK,IAAI;QAEpG,OAAOF;IACT;IAEA,MAAaG,WAAWjB,MAAc,EAAEQ,QAAuB,EAAiB;QAC9E,IAAIP,IAAAA,aAAO,EAACO,WAAW,MAAM,IAAIN,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMO,WAAiB,MAAMZ,uBAAU,CAACO,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIN;YAAO;QAAE;QACxE,IAAI,CAACS,UAAU,MAAM,IAAIP,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAMS,iBAAiB,MAAMC,IAAAA,YAAI,EAACJ,SAASK,QAAQ,EAAE;QACrD,MAAMhB,uBAAU,CAACqB,MAAM,CAAClB,QAAQ,qCAAKQ;YAAUK,UAAUF;;QAEzD,MAAMQ,aAAmB,MAAMtB,uBAAU,CAACO,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIN;YAAO;QAAE;QAC1E,OAAOmB;IACT;IAEA,MAAaC,WAAWpB,MAAc,EAAiB;QACrD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,wBAAwB;QAE1E,MAAMO,WAAiB,MAAMZ,uBAAU,CAACO,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIN;YAAO;QAAE;QACxE,IAAI,CAACS,UAAU,MAAM,IAAIP,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAML,uBAAU,CAACwB,MAAM,CAAC;YAAEf,IAAIN;QAAO;QACrC,OAAOS;IACT;AACF;AAlDqBf;IADpB4B,IAAAA,yBAAgB;GACI5B"}