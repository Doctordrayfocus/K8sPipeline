{"version":3,"sources":["../../src/resolvers/pipeline.resolver.ts"],"sourcesContent":["import PipelineRepository from '@/repositories/pipeline.repository';\nimport { CreatePipelineDto } from '@/dtos/pipeline.dto';\nimport { Schema } from 'bitbucket';\nimport { PipelineEntity } from '@/entities/pipeline.entity';\n\nexport class pipelineResolver extends PipelineRepository {\n  async workspaces(): Promise<Schema.Workspace[]> {\n    const paginatedWorkpaces = await this.getWorkspaces();\n    return paginatedWorkpaces.data.values;\n  }\n\n  async repositories(workspaceId: string): Promise<Schema.Repository[]> {\n    const paginatedRepositories = await this.getRespository(workspaceId);\n    const repositories = paginatedRepositories.data.values;\n    return repositories;\n  }\n\n  async pipelines(): Promise<PipelineEntity[]> {\n    const pipelines = await this.getPipelines();\n    return pipelines;\n  }\n\n  async createPipelineTemplate(createPipelineData: CreatePipelineDto): Promise<PipelineEntity> {\n    const pipeline = await this.createServicePipeline(createPipelineData);\n    return pipeline;\n  }\n\n  async getPipelineData(pipelineUuid: string): Promise<PipelineEntity> {\n    const pipeline = await this.getPipeline(pipelineUuid);\n    return pipeline;\n  }\n\n  async updateSetting(settingsUpdateData: { settingUuid: string; configToUse: string; serviceConfig: string }): Promise<boolean> {\n    const response = await this.updatePipelineSetting(\n      settingsUpdateData.settingUuid,\n      settingsUpdateData.configToUse,\n      settingsUpdateData.serviceConfig,\n    );\n\n    return response;\n  }\n}\n"],"names":["pipelineResolver","PipelineRepository","workspaces","paginatedWorkpaces","getWorkspaces","data","values","repositories","workspaceId","paginatedRepositories","getRespository","pipelines","getPipelines","createPipelineTemplate","createPipelineData","pipeline","createServicePipeline","getPipelineData","pipelineUuid","getPipeline","updateSetting","settingsUpdateData","response","updatePipelineSetting","settingUuid","configToUse","serviceConfig"],"mappings":";;;;+BAKaA;;aAAAA;;2DALkB;;;;;;AAKxB,IAAA,AAAMA,mBAAN,MAAMA,yBAAyBC,2BAAkB;IACtD,MAAMC,aAA0C;QAC9C,MAAMC,qBAAqB,MAAM,IAAI,CAACC,aAAa;QACnD,OAAOD,mBAAmBE,IAAI,CAACC,MAAM;IACvC;IAEA,MAAMC,aAAaC,WAAmB,EAAgC;QACpE,MAAMC,wBAAwB,MAAM,IAAI,CAACC,cAAc,CAACF;QACxD,MAAMD,eAAeE,sBAAsBJ,IAAI,CAACC,MAAM;QACtD,OAAOC;IACT;IAEA,MAAMI,YAAuC;QAC3C,MAAMA,YAAY,MAAM,IAAI,CAACC,YAAY;QACzC,OAAOD;IACT;IAEA,MAAME,uBAAuBC,kBAAqC,EAA2B;QAC3F,MAAMC,WAAW,MAAM,IAAI,CAACC,qBAAqB,CAACF;QAClD,OAAOC;IACT;IAEA,MAAME,gBAAgBC,YAAoB,EAA2B;QACnE,MAAMH,WAAW,MAAM,IAAI,CAACI,WAAW,CAACD;QACxC,OAAOH;IACT;IAEA,MAAMK,cAAcC,kBAAuF,EAAoB;QAC7H,MAAMC,WAAW,MAAM,IAAI,CAACC,qBAAqB,CAC/CF,mBAAmBG,WAAW,EAC9BH,mBAAmBI,WAAW,EAC9BJ,mBAAmBK,aAAa;QAGlC,OAAOJ;IACT;AACF"}