{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import 'reflect-metadata';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport { ApolloServer } from '@apollo/server';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport { createConnection } from 'typeorm';\nimport { NODE_ENV, PORT, ORIGIN, CREDENTIALS } from '@config';\nimport { dbConnection } from '@databases';\nimport errorMiddleware from '@middlewares/error.middleware';\nimport { logger, errorLogger } from '@utils/logger';\nimport AuthStrategyRepository from './repositories/authStrategy.repository';\nimport PipelineRepository from './repositories/pipeline.repository';\nimport TemplateSyncer from './helpers/TemplateSyncer';\nimport { Server } from 'socket.io';\nimport http from 'http';\nimport { json } from 'body-parser';\nimport { typeDefs } from './typedefs';\nimport { resolvers } from './resolvers';\nimport path from 'path';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface Global {\n      SocketServer: Server;\n    }\n  }\n}\n\ninterface MyContext {\n  token?: String;\n}\n\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n  public socketIo: Server;\n  public httpServer: http.Server;\n\n  constructor() {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 8080;\n\n    this.connectToDatabase();\n    this.setSocketServe();\n    this.initializeMiddlewares();\n    this.initApolloServer();\n    this.initializeErrorHandling();\n    this.registerRestRoute();\n    this.syncAppTemplate();\n  }\n\n  public async listen() {\n    this.httpServer.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`ðŸŽ® http://localhost:${this.port}/graphql`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private syncAppTemplate = () => {\n    const templateSyncer = new TemplateSyncer();\n\n    templateSyncer.syncRemoteFiles();\n  };\n\n  private setSocketServe = () => {\n    this.httpServer = http.createServer(this.app);\n    this.socketIo = new Server(this.httpServer);\n\n    global.SocketServer = this.socketIo;\n\n    this.socketIo.on('connection', () => {\n      console.log('a user connected');\n    });\n  };\n\n  private registerRestRoute() {\n    try {\n      const authStrategyRepo = new AuthStrategyRepository();\n      const pipelineRepo = new PipelineRepository();\n\n      this.app.get('/auth/bitbucket', authStrategyRepo.authenticateStategy('bitbucket'));\n\n      // this.app.get('/auth/giblab', authStrategyRepo.authenticateStategy('gitlab'));\n\n      // this.app.get('/auth/github', authStrategyRepo.authenticateStategy('github'));\n\n      this.app.get('/auth/bitbucket/callback', authStrategyRepo.handleGithubCallback('bitbucket'), (req, res) => {\n        res.sendFile(__dirname + '/static/close.html');\n      });\n\n      this.app.get('/testing', async (req, res) => {\n        // return pipelineRepo.getRepositoryBranches('cc-portfolio', 'RoofWallet', res);\n        try {\n          const pipelineData = await pipelineRepo.getPipelines();\n          return res.send(pipelineData);\n        } catch (error) {\n          console.log(error);\n        }\n      });\n\n      // this.app.post('/auth/giblab/callback', authStrategyRepo.handleGithubCallback('gitlab'), (req, res) => {\n      //   res.sendFile('../static/close.html');\n      // });\n      // this.app.post('/auth/github/callback', authStrategyRepo.handleGithubCallback('github'), (req, res) => {\n      //   res.sendFile('../static/close.html');\n      // });\n\n      this.app.use(express.static(path.join(__dirname, '../frontend/dist')));\n\n      this.app.get('/*', (req, res) => {\n        res.sendFile(path.join(__dirname, '../frontend/dist/index.html'));\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private connectToDatabase() {\n    createConnection(dbConnection)\n      .then(() => {\n        console.log('DB connection successful');\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  private initializeMiddlewares() {\n    if (this.env === 'production') {\n      this.app.use(hpp());\n      this.app.use(helmet());\n    }\n\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n  }\n\n  private async initApolloServer() {\n    try {\n      const apolloServer = new ApolloServer<MyContext>({\n        resolvers: resolvers,\n        typeDefs: typeDefs,\n        plugins: [ApolloServerPluginDrainHttpServer({ httpServer: this.httpServer })],\n        formatError: error => {\n          errorLogger(error);\n\n          return error;\n        },\n      });\n\n      await apolloServer\n        .start()\n        .then(() => {\n          console.log('Apollo Server connected');\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      this.app.use(\n        '/graphql',\n        cors<cors.CorsRequest>(),\n        json(),\n        expressMiddleware(apolloServer, {\n          context: async ({ req }) => ({ token: req.headers.token }),\n        }),\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(errorMiddleware);\n  }\n}\n\nexport default App;\n"],"names":["App","listen","httpServer","port","logger","info","env","getServer","app","registerRestRoute","authStrategyRepo","AuthStrategyRepository","pipelineRepo","PipelineRepository","get","authenticateStategy","handleGithubCallback","req","res","sendFile","__dirname","pipelineData","getPipelines","send","error","console","log","use","express","static","path","join","connectToDatabase","createConnection","dbConnection","then","catch","initializeMiddlewares","hpp","helmet","cors","origin","ORIGIN","credentials","CREDENTIALS","compression","json","urlencoded","extended","cookieParser","initApolloServer","apolloServer","ApolloServer","resolvers","typeDefs","plugins","ApolloServerPluginDrainHttpServer","formatError","errorLogger","start","expressMiddleware","context","token","headers","initializeErrorHandling","errorMiddleware","constructor","syncAppTemplate","templateSyncer","TemplateSyncer","syncRemoteFiles","setSocketServe","http","createServer","socketIo","Server","global","SocketServer","on","NODE_ENV","PORT"],"mappings":"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"}