{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport winston from 'winston';\nimport winstonDaily from 'winston-daily-rotate-file';\nimport { LOG_DIR } from '@config';\n\n// logs dir\nconst logDir: string = join(__dirname, LOG_DIR);\n\nif (!existsSync(logDir)) {\n  mkdirSync(logDir);\n}\n\n// Define log format\nconst logFormat = winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`);\n\n/*\n * Log Level\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\n */\nexport const logger = winston.createLogger({\n  format: winston.format.combine(\n    winston.format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss',\n    }),\n    logFormat,\n  ),\n  transports: [\n    // debug log setting\n    new winstonDaily({\n      level: 'debug',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/debug', // log file /logs/debug/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      json: false,\n      zippedArchive: true,\n    }),\n    // error log setting\n    new winstonDaily({\n      level: 'error',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/error', // log file /logs/error/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      handleExceptions: true,\n      json: false,\n      zippedArchive: true,\n    }),\n  ],\n});\n\nlogger.add(\n  new winston.transports.Console({\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize()),\n  }),\n);\n\nexport const responseLogger = request => {\n  const { query } = request.request;\n  logger.info(query);\n};\n\nexport const errorLogger = error => {\n  const { validationErrors } = error.extensions.exception;\n\n  let message = '';\n  if (validationErrors) {\n    message = validationErrors.map(error => Object.values(error.constraints)).join(', ');\n  } else {\n    message = error.message;\n  }\n\n  logger.error(message);\n};\n"],"names":["logger","responseLogger","errorLogger","logDir","join","__dirname","LOG_DIR","existsSync","mkdirSync","logFormat","winston","format","printf","timestamp","level","message","createLogger","combine","transports","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","splat","colorize","request","query","info","error","validationErrors","extensions","exception","map","Object","values","constraints"],"mappings":";;;;;;;;;;;IAoBaA,MAAM,MAANA;IAsCAC,cAAc,MAAdA;IAKAC,WAAW,MAAXA;;oBA/DyB;sBACjB;gDACD;+DACK;wBACD;;;;;;AAGxB,MAAMC,SAAiBC,IAAAA,UAAI,EAACC,WAAWC,eAAO;AAE9C,IAAI,CAACC,IAAAA,cAAU,EAACJ,SAAS;IACvBK,IAAAA,aAAS,EAACL;AACZ,CAAC;AAGD,MAAMM,YAAYC,gBAAO,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAEC,UAAS,EAAEC,MAAK,EAAEC,QAAO,EAAE,GAAK,CAAC,EAAEF,UAAU,CAAC,EAAEC,MAAM,EAAE,EAAEC,QAAQ,CAAC;AAMvG,MAAMf,SAASU,gBAAO,CAACM,YAAY,CAAC;IACzCL,QAAQD,gBAAO,CAACC,MAAM,CAACM,OAAO,CAC5BP,gBAAO,CAACC,MAAM,CAACE,SAAS,CAAC;QACvBF,QAAQ;IACV,IACAF;IAEFS,YAAY;QAEV,IAAIC,+BAAY,CAAC;YACfL,OAAO;YACPM,aAAa;YACbC,SAASlB,SAAS;YAClBmB,UAAU,CAAC,UAAU,CAAC;YACtBC,UAAU;YACVC,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;QAEA,IAAIN,+BAAY,CAAC;YACfL,OAAO;YACPM,aAAa;YACbC,SAASlB,SAAS;YAClBmB,UAAU,CAAC,UAAU,CAAC;YACtBC,UAAU;YACVG,kBAAkB,IAAI;YACtBF,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;KACD;AACH;AAEAzB,OAAO2B,GAAG,CACR,IAAIjB,gBAAO,CAACQ,UAAU,CAACU,OAAO,CAAC;IAC7BjB,QAAQD,gBAAO,CAACC,MAAM,CAACM,OAAO,CAACP,gBAAO,CAACC,MAAM,CAACkB,KAAK,IAAInB,gBAAO,CAACC,MAAM,CAACmB,QAAQ;AAChF;AAGK,MAAM7B,iBAAiB8B,CAAAA,UAAW;IACvC,MAAM,EAAEC,MAAK,EAAE,GAAGD,QAAQA,OAAO;IACjC/B,OAAOiC,IAAI,CAACD;AACd;AAEO,MAAM9B,cAAcgC,CAAAA,QAAS;IAClC,MAAM,EAAEC,iBAAgB,EAAE,GAAGD,MAAME,UAAU,CAACC,SAAS;IAEvD,IAAItB,UAAU;IACd,IAAIoB,kBAAkB;QACpBpB,UAAUoB,iBAAiBG,GAAG,CAACJ,CAAAA,QAASK,OAAOC,MAAM,CAACN,MAAMO,WAAW,GAAGrC,IAAI,CAAC;IACjF,OAAO;QACLW,UAAUmB,MAAMnB,OAAO;IACzB,CAAC;IAEDf,OAAOkC,KAAK,CAACnB;AACf"}