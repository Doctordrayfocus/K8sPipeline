{"version":3,"sources":["../../src/helpers/VariableExtractor.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nexport default class VariableExtractor {\n  public extractTemplateVariables = async (lang: string): Promise<{ templateVariables: any; folders: any }> => {\n    const templateVariables = {};\n\n    return new Promise(async resolveMain => {\n      const files = [];\n\n      const folders = {};\n\n      const readFolderFiles = (folder = '') => {\n        return new Promise(resolve => {\n          fs.readdir(path.join(__dirname, `../templates/${lang}${folder !== '' ? folder : ''}`), (err, items) => {\n            resolve({\n              items,\n              folder,\n            });\n          });\n        });\n      };\n\n      const rootFileAndFolders: any = await readFolderFiles();\n\n      const getAllConfigFiles = async () => {\n        const getFilesInFolders = async (item, folder = '') => {\n          const itemIsFolder = item.split('.').length === 1;\n\n          if (itemIsFolder) {\n            const folderName = `${folder === '' ? `/${item}` : `${folder}`}`;\n\n            folders[folderName] = [];\n\n            const fileFolder: any = await readFolderFiles(folderName);\n\n            const allPromises = [];\n\n            fileFolder.items.forEach(subItem => {\n              allPromises.push(getFilesInFolders(subItem, fileFolder.folder + '/' + subItem));\n            });\n\n            await Promise.all(allPromises);\n          } else {\n            const fullFilePath = `${folder !== '' ? folder : item}`;\n\n            if (fullFilePath.split('.')[1] === 'yaml' || fullFilePath.split('.')[1] === 'yml') {\n              files.push(fullFilePath);\n            }\n          }\n        };\n\n        const allPromises = [];\n\n        rootFileAndFolders.items.forEach(item => {\n          allPromises.push(getFilesInFolders(item, ''));\n        });\n\n        await Promise.all(allPromises).then(() => {\n          // console.log(files);\n        });\n      };\n\n      await getAllConfigFiles();\n\n      const matchAll = (matchText: string) => {\n        let finalMatches = [];\n\n        const regex = /\\$\\{.*\\}/gi;\n        const matches = matchText.match(regex);\n\n        if (matches) {\n          for (let index = 0; index < matches.length; index++) {\n            const matchItem = matches[index];\n\n            let matchLevel1 = matchItem.split('-');\n            if (matchLevel1.length == 1) {\n              matchLevel1 = matchItem.split('_');\n            }\n            if (matchLevel1.length == 1) {\n              matchLevel1 = matchItem.split(':');\n            }\n\n            const newMatch = [];\n\n            matchLevel1.forEach(matchItem1 => {\n              if (matchItem1.match(regex)) {\n                newMatch.push(matchItem1.match(regex));\n              }\n            });\n\n            finalMatches[index] = newMatch;\n          }\n        }\n\n        finalMatches = finalMatches.flat(5);\n\n        return finalMatches;\n      };\n\n      const readAndExtractVariable = (file: string) => {\n        return new Promise(resolve => {\n          try {\n            fs.readFile(path.join(__dirname, `../templates/${lang}${file}`), { encoding: 'utf-8' }, function (err, data) {\n              if (!err) {\n                try {\n                  const allMatches = matchAll(data);\n\n                  if (allMatches) {\n                    allMatches.forEach(variable => {\n                      const initialString = variable.substring(2);\n                      const property = `${initialString.substring(0, initialString.length - 1)}`;\n                      const folderName = file.split('/');\n                      folderName.pop();\n                      if (!folders[folderName.join('/')].includes(property)) {\n                        folders[folderName.join('/')].push(property);\n                      }\n                      if (!templateVariables.hasOwnProperty(property)) {\n                        templateVariables[property] = '';\n                      }\n                    });\n                  }\n\n                  resolve('done');\n                } catch (error) {\n                  console.log(error);\n                }\n              } else {\n                console.log(err);\n                resolve(null);\n              }\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        });\n      };\n\n      const extractVariableFromAllFiles = async () => {\n        const allPromises = [];\n\n        files.forEach(async file => {\n          allPromises.push(\n            readAndExtractVariable(file)\n              .then(() => {\n                //\n              })\n              .catch(err => {\n                console.log(err);\n              }),\n          );\n        });\n        await Promise.all(allPromises).then(() => {\n          //\n        });\n      };\n\n      await extractVariableFromAllFiles().then(() => {\n        resolveMain({\n          templateVariables,\n          folders,\n        });\n      });\n    });\n  };\n}\n"],"names":["VariableExtractor","extractTemplateVariables","lang","templateVariables","Promise","resolveMain","files","folders","readFolderFiles","folder","resolve","fs","readdir","path","join","__dirname","err","items","rootFileAndFolders","getAllConfigFiles","getFilesInFolders","item","itemIsFolder","split","length","folderName","fileFolder","allPromises","forEach","subItem","push","all","fullFilePath","then","matchAll","matchText","finalMatches","regex","matches","match","index","matchItem","matchLevel1","newMatch","matchItem1","flat","readAndExtractVariable","file","readFile","encoding","data","allMatches","variable","initialString","substring","property","pop","includes","hasOwnProperty","error","console","log","extractVariableFromAllFiles","catch"],"mappings":";;;;;;aAGqBA;;2CAHN;6CACE;;;;;;AAEF,IAAA,AAAMA,oBAAN,MAAMA;;aACZC,2BAA2B,OAAOC,OAAoE;YAC3G,MAAMC,oBAAoB,CAAC;YAE3B,OAAO,IAAIC,QAAQ,OAAMC,cAAe;gBACtC,MAAMC,QAAQ,EAAE;gBAEhB,MAAMC,UAAU,CAAC;gBAEjB,MAAMC,kBAAkB,CAACC,SAAS,EAAE,GAAK;oBACvC,OAAO,IAAIL,QAAQM,CAAAA,UAAW;wBAC5BC,WAAE,CAACC,OAAO,CAACC,aAAI,CAACC,IAAI,CAACC,WAAW,CAAC,aAAa,EAAEb,KAAK,EAAEO,WAAW,KAAKA,SAAS,EAAE,CAAC,CAAC,GAAG,CAACO,KAAKC,QAAU;4BACrGP,QAAQ;gCACNO;gCACAR;4BACF;wBACF;oBACF;gBACF;gBAEA,MAAMS,qBAA0B,MAAMV;gBAEtC,MAAMW,oBAAoB,UAAY;oBACpC,MAAMC,oBAAoB,OAAOC,MAAMZ,SAAS,EAAE,GAAK;wBACrD,MAAMa,eAAeD,KAAKE,KAAK,CAAC,KAAKC,MAAM,KAAK;wBAEhD,IAAIF,cAAc;4BAChB,MAAMG,aAAa,CAAC,EAAEhB,WAAW,KAAK,CAAC,CAAC,EAAEY,KAAK,CAAC,GAAG,CAAC,EAAEZ,OAAO,CAAC,CAAC,CAAC;4BAEhEF,OAAO,CAACkB,WAAW,GAAG,EAAE;4BAExB,MAAMC,aAAkB,MAAMlB,gBAAgBiB;4BAE9C,MAAME,cAAc,EAAE;4BAEtBD,WAAWT,KAAK,CAACW,OAAO,CAACC,CAAAA,UAAW;gCAClCF,YAAYG,IAAI,CAACV,kBAAkBS,SAASH,WAAWjB,MAAM,GAAG,MAAMoB;4BACxE;4BAEA,MAAMzB,QAAQ2B,GAAG,CAACJ;wBACpB,OAAO;4BACL,MAAMK,eAAe,CAAC,EAAEvB,WAAW,KAAKA,SAASY,IAAI,CAAC,CAAC;4BAEvD,IAAIW,aAAaT,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,UAAUS,aAAaT,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO;gCACjFjB,MAAMwB,IAAI,CAACE;4BACb,CAAC;wBACH,CAAC;oBACH;oBAEA,MAAML,cAAc,EAAE;oBAEtBT,mBAAmBD,KAAK,CAACW,OAAO,CAACP,CAAAA,OAAQ;wBACvCM,YAAYG,IAAI,CAACV,kBAAkBC,MAAM;oBAC3C;oBAEA,MAAMjB,QAAQ2B,GAAG,CAACJ,aAAaM,IAAI,CAAC,IAAM,CAE1C;gBACF;gBAEA,MAAMd;gBAEN,MAAMe,WAAW,CAACC,YAAsB;oBACtC,IAAIC,eAAe,EAAE;oBAErB,MAAMC,QAAQ;oBACd,MAAMC,UAAUH,UAAUI,KAAK,CAACF;oBAEhC,IAAIC,SAAS;wBACX,IAAK,IAAIE,QAAQ,GAAGA,QAAQF,QAAQd,MAAM,EAAEgB,QAAS;4BACnD,MAAMC,YAAYH,OAAO,CAACE,MAAM;4BAEhC,IAAIE,cAAcD,UAAUlB,KAAK,CAAC;4BAClC,IAAImB,YAAYlB,MAAM,IAAI,GAAG;gCAC3BkB,cAAcD,UAAUlB,KAAK,CAAC;4BAChC,CAAC;4BACD,IAAImB,YAAYlB,MAAM,IAAI,GAAG;gCAC3BkB,cAAcD,UAAUlB,KAAK,CAAC;4BAChC,CAAC;4BAED,MAAMoB,WAAW,EAAE;4BAEnBD,YAAYd,OAAO,CAACgB,CAAAA,aAAc;gCAChC,IAAIA,WAAWL,KAAK,CAACF,QAAQ;oCAC3BM,SAASb,IAAI,CAACc,WAAWL,KAAK,CAACF;gCACjC,CAAC;4BACH;4BAEAD,YAAY,CAACI,MAAM,GAAGG;wBACxB;oBACF,CAAC;oBAEDP,eAAeA,aAAaS,IAAI,CAAC;oBAEjC,OAAOT;gBACT;gBAEA,MAAMU,yBAAyB,CAACC,OAAiB;oBAC/C,OAAO,IAAI3C,QAAQM,CAAAA,UAAW;wBAC5B,IAAI;4BACFC,WAAE,CAACqC,QAAQ,CAACnC,aAAI,CAACC,IAAI,CAACC,WAAW,CAAC,aAAa,EAAEb,KAAK,EAAE6C,KAAK,CAAC,GAAG;gCAAEE,UAAU;4BAAQ,GAAG,SAAUjC,GAAG,EAAEkC,IAAI,EAAE;gCAC3G,IAAI,CAAClC,KAAK;oCACR,IAAI;wCACF,MAAMmC,aAAajB,SAASgB;wCAE5B,IAAIC,YAAY;4CACdA,WAAWvB,OAAO,CAACwB,CAAAA,WAAY;gDAC7B,MAAMC,gBAAgBD,SAASE,SAAS,CAAC;gDACzC,MAAMC,WAAW,CAAC,EAAEF,cAAcC,SAAS,CAAC,GAAGD,cAAc7B,MAAM,GAAG,GAAG,CAAC;gDAC1E,MAAMC,aAAasB,KAAKxB,KAAK,CAAC;gDAC9BE,WAAW+B,GAAG;gDACd,IAAI,CAACjD,OAAO,CAACkB,WAAWX,IAAI,CAAC,KAAK,CAAC2C,QAAQ,CAACF,WAAW;oDACrDhD,OAAO,CAACkB,WAAWX,IAAI,CAAC,KAAK,CAACgB,IAAI,CAACyB;gDACrC,CAAC;gDACD,IAAI,CAACpD,kBAAkBuD,cAAc,CAACH,WAAW;oDAC/CpD,iBAAiB,CAACoD,SAAS,GAAG;gDAChC,CAAC;4CACH;wCACF,CAAC;wCAED7C,QAAQ;oCACV,EAAE,OAAOiD,OAAO;wCACdC,QAAQC,GAAG,CAACF;oCACd;gCACF,OAAO;oCACLC,QAAQC,GAAG,CAAC7C;oCACZN,QAAQ,IAAI;gCACd,CAAC;4BACH;wBACF,EAAE,OAAOiD,OAAO;4BACdC,QAAQC,GAAG,CAACF;wBACd;oBACF;gBACF;gBAEA,MAAMG,8BAA8B,UAAY;oBAC9C,MAAMnC,cAAc,EAAE;oBAEtBrB,MAAMsB,OAAO,CAAC,OAAMmB,OAAQ;wBAC1BpB,YAAYG,IAAI,CACdgB,uBAAuBC,MACpBd,IAAI,CAAC,IAAM,CAEZ,GACC8B,KAAK,CAAC/C,CAAAA,MAAO;4BACZ4C,QAAQC,GAAG,CAAC7C;wBACd;oBAEN;oBACA,MAAMZ,QAAQ2B,GAAG,CAACJ,aAAaM,IAAI,CAAC,IAAM,CAE1C;gBACF;gBAEA,MAAM6B,8BAA8B7B,IAAI,CAAC,IAAM;oBAC7C5B,YAAY;wBACVF;wBACAI;oBACF;gBACF;YACF;QACF;;AACF"}